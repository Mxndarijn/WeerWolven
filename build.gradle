plugins {
    id 'java'
    id("xyz.jpenilla.run-paper") version "2.3.1"
    id "com.gradleup.shadow" version "8.3.3"
    id 'org.hidetake.ssh' version '2.12.0'
}

group = 'me.mxndarijn'
version = '1.0-SNAPSHOT'

repositories {
    mavenCentral()
    maven {
        name = "jitpack.io"
        url = 'https://jitpack.io/'
    }
    maven {
        name = "papermc-repo"
        url = "https://repo.papermc.io/repository/maven-public/"
    }
    maven {
        name ="placeholderapi"
        url = 'https://repo.extendedclip.com/content/repositories/placeholderapi/'
    }
    maven {
        name = "sonatype"
        url = "https://oss.sonatype.org/content/groups/public/"
    }
    maven {
        name = "lucko"
        url = "https://repo.lucko.me/"
    }
}

dependencies {
    implementation 'org.jetbrains:annotations:24.0.0'

    //MxLib
    implementation 'com.github.Mxndarijn:MxLib:1.0.25'

    // Lombok - enabled for compileOnly with annotation processors
    compileOnly 'org.projectlombok:lombok:1.18.34'
    annotationProcessor 'org.projectlombok:lombok:1.18.34'
    testCompileOnly 'org.projectlombok:lombok:1.18.34'
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.34'

    // Testing (JUnit 5)
    testImplementation platform('org.junit:junit-bom:5.10.2')
    testImplementation 'org.junit.jupiter:junit-jupiter'

    compileOnly("io.papermc.paper:paper-api:1.21.8-R0.1-SNAPSHOT")
    compileOnly 'me.clip:placeholderapi:2.11.6'
    compileOnly 'com.mojang:authlib:1.5.21'
    compileOnly 'net.dmulloy2:ProtocolLib:5.4.0'
    compileOnly 'net.luckperms:api:5.4'

    compileOnly fileTree(dir: 'libs', include: ['*.jar'])
    compileOnly 'com.github.LeonMangler:SuperVanish:6.2.18-3'
    implementation fileTree(dir: 'libsImpl', include: ['*.jar'])
    implementation 'commons-io:commons-io:2.11.0'
    implementation 'com.zaxxer:HikariCP:6.3.0'
    implementation("jakarta.persistence:jakarta.persistence-api:3.1.0")
    runtimeOnly("com.mysql:mysql-connector-j:9.0.0")
    implementation("org.hibernate.orm:hibernate-core:6.5.0.Final")
    implementation("com.googlecode.json-simple:json-simple:1.1")

}

tasks {
    runServer {
        // Configure the Minecraft version for our task.
        // This is the only required configuration besides applying the plugin.
        // Your plugin's jar (or shadowJar if present) will be used automatically.
        minecraftVersion("1.21")
    }
    test {
        useJUnitPlatform()
        testLogging {
            events "passed", "skipped", "failed"
        }
    }
}

def targetJavaVersion = 21
java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'

    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        options.release.set(targetJavaVersion)
    }
}

processResources {
    def props = [version: version]
    inputs.properties props
    filteringCharset 'UTF-8'
    filesMatching('paper-plugin.yml') {
        expand props
    }
}

ext.deployHost      = (findProperty('deploy.host') ?: 'localhost').toString()
ext.deployPort      = (findProperty('deploy.port') ?: '22').toString() as int
ext.deployUser      = (findProperty('deploy.user') ?: '').toString()
ext.deployPassword  = (findProperty('deploy.password') ?: '').toString()
ext.deployRemoteDir = (findProperty('deploy.remoteDir') ?: '/').toString()

ssh.settings {
    // Accept unknown hosts to avoid interactive prompts in CI; tighten if you maintain known_hosts
    knownHosts = allowAnyHosts
}

// Define the remote using your gradle.properties values
ssh.remotes {
    venex {
        host = deployHost
        user = deployUser
        port = deployPort
        // Prefer key-based auth if available; falls back to password from gradle.properties
        // identity = file("${System.properties['user.home']}/.ssh/id_rsa")
        password = deployPassword
    }
}

// Helper to locate the artifact we want to ship (Shadow plugin -> "-all" classifier by default)
def artifactProvider = tasks.named('shadowJar') // change to 'jar' if you don't use shadow
def artifactPath = {
    def t = artifactProvider.get()
    return t.archiveFile.get().asFile
}
tasks.register('deployToVenex') {
    group = 'deployment'
    description = 'Builds the shadow jar and deploys it to Venex over SFTP.'

    dependsOn(artifactProvider)

    doLast {
        def jarFile = artifactPath()
        if (!jarFile.exists()) {
            throw new GradleException("Deploy artifact not found: ${jarFile}")
        }

        logger.lifecycle("Deploying ${jarFile.name} to ${deployUser}@${deployHost}:${deployRemoteDir} via SFTP (port ${deployPort})")

        ssh.run {
            session(ssh.remotes.venex) {
                // 1) CLEAN: delete old Weerwolven*.jar in its own SFTP channel
                sftp {
                    try { mkdir(deployRemoteDir) } catch (ignored) { }
                    def entries = ls(deployRemoteDir)
                    entries.each { f ->
                        def name = f.filename
                        if (name?.toLowerCase()?.startsWith("weerwolven") && name?.toLowerCase()?.endsWith(".jar")) {
                            logger.lifecycle("Deleting old file: ${name}")
                            rm("${deployRemoteDir}/${name}")
                        }
                    }
                }

                // 2) UPLOAD: reopen SFTP channel and upload
                logger.lifecycle("Uploading ${jarFile.name} (${jarFile.length()} bytes)…")
                put from: jarFile, into: deployRemoteDir
                logger.lifecycle("Upload finished.")
            }
        }

        logger.lifecycle("Deploy complete ✅")
    }

}


